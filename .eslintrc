{
  "parserOptions": {
    "sourceType": "module"
  },
  "globals": {
    "module": true,
    "Reflect": true
    // for Reflect.deleteProperty()
  },
  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "jest": true,
    "jasmine": true
  },
  "parser": "babel-eslint",
  "plugins": [
    "babel",
    "react",
    "flowtype"
 ],
  "extends": [
    "plugin:flowtype/recommended"
 ],
  "rules": {
    /* Flow Rules */
    "flowtype/boolean-style": [ 2, "boolean" ],
    "flowtype/define-flow-type": 1,
    "flowtype/delimiter-dangle": [ 2, "never" ], "flowtype/generic-spacing": [ 2, "never" ],
    "flowtype/no-mixed": 2,
    "flowtype/no-primitive-constructor-types": 2,
    "flowtype/no-types-missing-file-annotation": 2,
    "flowtype/no-weak-types": 0,
    "flowtype/object-type-delimiter": [ 2, "comma" ],
    "flowtype/require-parameter-type": 2,
    "flowtype/require-readonly-react-props": 0,
    "flowtype/require-return-type": [ 2, "always", {  "annotateUndefined": "never"   } ],
    "flowtype/require-valid-file-annotation": 2,
    "flowtype/semi": [ 2, "always" ],
    "flowtype/space-after-type-colon": [ 2, "always" ],
    "flowtype/space-before-generic-bracket": [ 2, "never" ],
    "flowtype/space-before-type-colon": [ 2, "never" ],
    "flowtype/type-id-match": [ 2, "^([A-Z][a-z0-9]+)+Type$" ],
    "flowtype/union-intersection-spacing": [ 2, "always" ],
    "flowtype/use-flow-type": 1,
    "flowtype/valid-syntax": 1,

    /* Possible Errors */
    "comma-dangle": [1,"never" ],
    // disallow or enforce trailing commas (recommended)
    "no-cond-assign": [ 2, "always" ],
    // disallow assignment in conditional expressions (recommended)
    "no-console": 1,
    // disallow use of console in the node environment (recommended)
    "no-constant-condition": 2,
    // disallow use of constant expressions in conditions (recommended)
    "no-control-regex": 2,
    // disallow control characters in regular expressions (recommended)
    "no-debugger": 2,
    // disallow use of debugger (recommended)
    "no-dupe-args": 2,
    // disallow duplicate arguments in functions (recommended)
    "no-dupe-keys": 2,
    // disallow duplicate keys when creating object literals (recommended)
    "no-duplicate-case": 2,
    // disallow a duplicate case label. (recommended)
    "no-empty-character-class": 2,
    // disallow the use of empty character classes in regular expressions (recommended)
    "no-empty": 2,
    // disallow empty statements (recommended)
    "no-ex-assign": 2,
    // disallow assigning to the exception in a catch block (recommended)
    "no-extra-boolean-cast": 0,
    // disallow double-negation boolean casts in a boolean context (not recommended)
    "no-extra-parens": 0,
    // disallow unnecessary parentheses
    "no-extra-semi": 2,
    // disallow unnecessary semicolons (recommended) (fixable)
    "no-func-assign": 2,
    // disallow overwriting functions written as function declarations (recommended)
    "no-inner-declarations": [
      2,
      "both"
 ],
    // disallow function or variable declarations in nested blocks (recommended)
    "no-invalid-regexp": 2,
    // disallow invalid regular expression strings in the RegExp constructor (recommended)
    "no-irregular-whitespace": 2,
    // disallow irregular whitespace outside of strings and comments (recommended)
    "no-negated-in-lhs": 2,
    // disallow negation of the left operand of an in expression (recommended)
    "no-obj-calls": 2,
    // disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
    "no-regex-spaces": 2,
    //disallow multiple spaces in a regular expression literal (recommended)
    "no-sparse-arrays": 2,
    // disallow sparse arrays (recommended)
    "no-unexpected-multiline": 2,
    // Avoid code that looks like two expressions but is actually one
    "no-unreachable": 2,
    // disallow unreachable statements after a return, throw, continue, or break statement (recommended)
    "use-isnan": 2,
    // disallow comparisons with the value NaN (recommended)
    "valid-jsdoc": 1,
    // Ensure JSDoc comments are valid
    "valid-typeof": 2,
    // Ensure that the results of typeof are compared against a valid string (recommended)

    /* Best Practices */
    "block-scoped-var": 0,
    // treat var statements as if they were block scoped (off by default). 0: deep destructuring is not compatible https://github.com/eslint/eslint/issues/1863
    "complexity": [
      1,
      20
 ],
    // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": [
      2,
      {
        "treatUndefinedAsUnspecified": false
      }
 ],
    // require return statements to either always or never specify values
    "curly": 2,
    // specify curly brace conventions for all control statements
    "default-case": 2,
    // require default case in switch statements (off by default)
    "dot-notation": 2,
    // encourages use of dot notation whenever possible
    "eqeqeq": 2,
    // require the use of === and !==
    "guard-for-in": 2,
    // make sure for-in loops have an if statement (off by default)
    "no-alert": 1,
    // disallow the use of alert, confirm, and prompt
    "no-caller": 2,
    // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 2,
    // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 2,
    // disallow else after a return in an if (off by default)
    "no-eq-null": 2,
    // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 2,
    // disallow use of eval()
    "no-extend-native": 2,
    // disallow adding to native types
    "no-extra-bind": 2,
    // disallow unnecessary function binding
    "no-fallthrough": 2,
    // disallow fallthrough of case statements
    "no-floating-decimal": 2,
    // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 2,
    // disallow use of eval()-like methods
    "no-iterator": 2,
    // disallow usage of __iterator__ property
    "no-labels": 2,
    // disallow use of labeled statements
    "no-lone-blocks": 2,
    // disallow unnecessary nested blocks
    "no-loop-func": 2,
    // disallow creation of functions within loops
    "no-multi-spaces": 2,
    // disallow use of multiple spaces
    "no-multi-str": 2,
    // disallow use of multiline strings
    "no-native-reassign": 2,
    // disallow reassignments of native objects
    "no-new": 2,
    // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 2,
    // disallow use of new operator for Function object
    "no-new-wrappers": 2,
    // disallows creating new instances of String,Number, and Boolean
    "no-octal": 2,
    // disallow use of octal literals
    "no-octal-escape": 2,
    // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": 2,
    // disallow reassignment of function parameters (off by default)
    "no-process-env": 2,
    // disallow use of process.env (off by default)
    "no-proto": 2,
    // disallow usage of __proto__ property
    "no-redeclare": 2,
    // disallow declaring the same variable more then once
    "no-return-assign": 2,
    // disallow use of assignment in return statement
    "no-script-url": 2,
    // disallow use of javascript: urls.
    "no-self-compare": 2,
    // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 2,
    // disallow use of comma operator
    "no-throw-literal": 2,
    // restrict what can be thrown as an exception (off by default)
    "no-unused-expressions": 2,
    // disallow usage of expressions in statement position
    "no-void": 0,
    // disallow use of void operator (off by default)
    "no-warning-comments": [
      0,
      {
        "terms": [
          "todo",
          "fixme"
 ],
        "location": "start"
      }
 ],
    // disallow usage of configurable warning terms in comments": 2, // e.g. TODO or FIXME (off by default)
    "no-with": 2,
    // disallow use of the with statement
    "radix": 2,
    // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 2,
    // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 2,
    // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 2,
    // require or disallow Yoda conditions

    /* Strict Mode */
    "strict": [
      2,
      "global"
 ],
    /* Variables */
    "init-declarations": [
      0,
      "always"
 ],
    //enforce or disallow variable initializations at definition
    "no-catch-shadow": 1,
    //disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": 2,
    //disallow deletion of variables (recommended)
    "no-label-var": 2,
    //disallow labels that share a name with a variable
    "no-shadow-restricted-names": 2,
    //disallow shadowing of names such as arguments
    "no-shadow": 2,
    //disallow declaration of variables already declared in the outer scope
    "no-undef-init": 2,
    //disallow use of undefined when initializing variables
    "no-undef": 2,
    //disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    "no-undefined": 2,
    //disallow use of undefined variable
    "no-unused-vars": [
      2,
      {
        "vars": "local",
        "args": "after-used"
      }
 ],
    //disallow declaration of variables that are not used in the code (recommended)
    "no-use-before-define": 2,
    //disallow use of variables before they are defined

    /* Node.js and CommonJS */
    "callback-return": 1,
    //enforce return after a callback
    "global-require": 0,
    //enforce require() on top-level module scope
    "handle-callback-err": 1,
    //enforce error handling in callbacks
    "no-mixed-requires": 1,
    //disallow mixing regular variable and require declarations
    "no-new-require": 1,
    //disallow use of new operator with the require function
    "no-path-concat": 1,
    //disallow string concatenation with __dirname and __filename
    "no-process-exit": 1,
    //disallow process.exit()
    "no-restricted-modules": [
      1,
      ""
 ],
    //restrict usage of specified node modules
    "no-sync": 0,
    //disallow use of synchronous methods

    /* Stylistic Issues */
    "array-bracket-spacing": [
      1,
      "never"
 ],
    //enforce spacing inside array brackets (fixable)
    "block-spacing": [
      2,
      "always"
 ],
    //disallow or enforce spaces inside of single line blocks (fixable)
    "brace-style": [
      1,
      "1tbs",
      {
        "allowSingleLine": true
      }
 ],
    //enforce one true brace style
    "camelcase": [
      2,
      {
        "properties": "always"
      }
 ],
    //require camel case names
    "comma-spacing": [
      2,
      {
        "before": false,
        "after": true
      }
 ],
    //enforce spacing before and after comma (fixable)
    "comma-style": [
      2,
      "last"
 ],
    //enforce one true comma style
    "computed-property-spacing": 1,
    //require or disallow padding inside computed properties (fixable)
    "consistent-this": 0,
    //enforce consistent naming when capturing the current execution context
    "eol-last": 0,
    //enforce newline at the end of file, with no multiple empty lines (fixable)
    "func-names": 0,
    //require function expressions to have a name
    "func-style": [
      0,
      "declaration"
 ],
    //enforce use of function declarations or expressions
    "id-length": 0,
    //this option enforces minimum and space-after-keywordsimum identifier lengths (variable names, property names etc.)
    "id-match": 1,
    //require identifiers to match the provided regular expression
    "indent": [
      2,
      4,
      {
        "SwitchCase": 1,
        "VariableDeclarator": {
          "var": 0,
          "let": 0,
          "const": 0
        }
      }
 ],
    //specify tab or space width for your code (fixable)
    "jsx-quotes": [
      2,
      "prefer-single"
 ],
    //specify whether double or single quotes should be used in JSX attributes
    "key-spacing": [
      0,
      {
        "beforeColon": true,
        "afterColon": true
      }
 ],
    //enforce spacing between keys and values in object literal properties
    "linebreak-style": [
      0,
      "unix"
 ],
    //disallow mixed 'LF' and 'CRLF' as linebreaks
    "lines-around-comment": 1,
    //enforce empty lines around comments
    "max-nested-callbacks": [
      1,
      3
 ],
    //specify the maximum depth callbacks can be nested
    "new-cap": [
      1,
      {
        "capIsNewExceptions": [
          "Map",
          "List"
 ]
      }
 ],
    //require a capital letter for constructors (except when calling the MAP function)
    "new-parens": 1,
    //disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": 0,
    //require or disallow an empty newline after variable declarations
    "no-array-constructor": 1,
    //disallow use of the Array constructor
    "no-continue": 1,
    //disallow use of the continue statement
    "no-inline-comments": 0,
    //disallow comments inline after code
    "no-lonely-if": 0,
    //disallow if as the only statement in an else block
    "no-mixed-spaces-and-tabs": 2,
    //disallow mixed spaces and tabs for indentation (recommended)
    "no-multiple-empty-lines": [
      2,
      {
        "max": 2
      }
 ],
    //disallow multiple empty lines
    "no-negated-condition": 0,
    //disallow negated conditions
    "no-nested-ternary": 1,
    //disallow nested ternary expressions
    "no-new-object": 1,
    //disallow the use of the Object constructor
    "no-restricted-syntax": 1,
    //disallow use of certain syntax in code
    "no-spaced-func": 2,
    //disallow space between function identifier and application (fixable)
    "no-ternary": 0,
    //disallow the use of ternary operators
    "no-trailing-spaces": 1,
    //disallow trailing whitespace at the end of lines (fixable)
    "no-underscore-dangle": 0,
    //disallow dangling underscores in identifiers
    "no-unneeded-ternary": 1,
    //disallow the use of ternary operators when a simpler alternative exists
    "object-curly-spacing": [
      2,
      "never"
 ],
    //require or disallow padding inside curly braces (fixable)
    "one-var": [
      1,
      "never"
 ],
    //require or disallow one variable declaration per function
    "operator-assignment": [
      1,
      "always"
 ],
    //require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": 1,
    //enforce operators to be placed before or after line breaks
    "padded-blocks": [
      0,
      "never"
 ],
    //enforce padding within blocks
    "quote-props": [
      1,
      "as-needed"
 ],
    //require quotes around object literal property names
    "quotes": [
      2,
      "single"
 ],
    //specify whether backticks, double or single quotes should be used (fixable)
    "require-jsdoc": 0,
    //Require JSDoc comment
    "semi-spacing": [
      2,
      {
        "before": false,
        "after": true
      }
 ],
    //enforce spacing before and after semicolons
    "semi": 2,
    //require or disallow use of semicolons instead of ASI (fixable)
    "sort-vars": 1,
    //sort variables within the same declaration block
    "space-before-blocks": [
      2,
      "always"
 ],
    //require or disallow a space before blocks (fixable)
    "space-before-function-paren": [
      0,
      {
        "anonymous": "never",
        "named": "never"
      }
 ],
    //require or disallow a space before function opening parenthesis (fixable)
    "keyword-spacing": 0,
    //require a space before certain keywords (fixable)
    "space-in-parens": [
      0,
      "never"
 ],
    //require or disallow spaces inside parentheses
    "space-infix-ops": 2,
    //require spaces around operators (fixable)
    "space-unary-ops": 2,
    //require or disallow spaces before/after unary operators (fixable)
    "spaced-comment": [
      2,
      "always"
 ],
    //require or disallow a space immediately following the // or /* in a comment
    "wrap-regex": 1,
    //require regex literals to be wrapped in parentheses

    /* ECMAScript 6 */
    "arrow-body-style": 2,
    //require braces in arrow function body
    "arrow-parens": 0,
    //require parens in arrow function arguments
    "arrow-spacing": 2,
    //require space before/after arrow function's arrow (fixable)
    "constructor-super": 1,
    //verify calls of super() in constructors
    "generator-star-spacing": 2,
    //enforce spacing around the * in generator functions (fixable)
    "no-confusing-arrow": 0,
    //disallow arrow functions where a condition is expected
    "no-class-assign": 2,
    //disallow modifying variables of class declarations
    "no-const-assign": 2,
    //disallow modifying variables that are declared using const
    "no-dupe-class-members": 2,
    //disallow duplicate name in class members
    "no-this-before-super": 2,
    //disallow use of this/super before calling super() in constructors.
    "no-var": 0,
    //require let or const instead of var
    "object-shorthand": 0,
    //require method and property shorthand syntax for object literals
    "prefer-arrow-callback": 1,
    //suggest using arrow functions as callbacks
    "prefer-const": 1,
    //suggest using const declaration for variables that are never modified after declared
    "prefer-reflect": 0,
    //suggest using Reflect methods where applicable
    "prefer-spread": 1,
    //suggest using the spread operator instead of .apply().
    "prefer-template": 1,
    //suggest using template literals instead of strings concatenation
    "require-yield": 1,
    //disallow generator functions that do not have yield

    /* Legacy */
    "max-depth": [
      0,
      3
 ],
    //specify the maximum depth that blocks can be nested
    "max-len": [
      0,
      120,
      4
 ],
    //specify the maximum length of a line in your program
    "max-params": [
      2,
      5
 ],
    // limits the number of parameters that can be used in the function declaration.
    "max-statements": [
      1,
      200
 ],
    //specify the maximum number of statement allowed in a function
    "no-bitwise": 1,
    //disallow use of bitwise operators
    "no-plusplus": 2,
    //disallow use of unary operators, ++ and --

    /* Babel */
    "babel/generator-star-spacing": [
      1,
      "after"
 ],
    // Handles async/await functions correctly
    "babel/new-cap": [
      2,
      {
        "capIsNewExceptions": [
          "Map",
          "Router",
          "List",
          "StackNavigator"
 ]
      }
 ],
    // Ignores capitalized decorators (@Decorator)
    "babel/object-curly-spacing": [
      2,
      "never"
 ],
    // doesn't complain about export x from "mod"; or export * as x from "mod";
    "babel/object-shorthand": [
      0,
      "always"
 ],
    // doesn't fail when using object spread (...obj)
    "babel/arrow-parens": 0,
    // Handles async functions correctly


    /* React */
    "react/display-name": [
      0,
      {
        "ignoreTranspilerName": false
      }
 ],
    // Prevent missing displayName in a React component definition
    "react/forbid-prop-types": 0,
    // Forbid certain propTypes
    "react/jsx-boolean-value": [
      2,
      "always"
 ],
    // Enforce boolean attributes notation in JSX
    "react/jsx-closing-bracket-location": 0,
    // Validate closing bracket location in JSX
    "react/jsx-curly-spacing": [
      2,
      "never"
 ],
    // Enforce or disallow spaces inside of curly braces in JSX attributes
    "react/jsx-indent-props": 0,
    // Validate props indentation in JSX
    "react/jsx-max-props-per-line": [
      0,
      {
        "maximum": 3
      }
 ],
    // Limit maximum of props on a single line in JSX
    "react/jsx-no-bind": [
      0,
      {
        "ignoreRefs": false,
        "allowArrowFunctions": false,
        "allowBind": true
      }
 ],
    // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-no-duplicate-props": 2,
    // Prevent duplicate props in JSX
    "react/jsx-no-literals": 0,
    // Prevent usage of unwrapped JSX strings
    "react/jsx-no-undef": 2,
    // Disallow undeclared variables in JSX
    "react/sort-prop-types": 0,
    // Enforce propTypes declarations alphabetical sorting
    "react/jsx-sort-props": 0,
    // Enforce props alphabetical sorting
    "react/jsx-uses-react": 2,
    // Prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": 2,
    // Prevent variables used in JSX to be incorrectly marked as unused
    "react/no-danger": 2,
    // Prevent usage of dangerous JSX properties
    "react/no-did-mount-set-state": 2,
    // Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": 2,
    // Prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": 2,
    // Prevent direct mutation of this.state
    "react/no-multi-comp": 0,
    // Prevent multiple component definition per file
    "react/no-set-state": 0,
    // Prevent usage of setState
    "react/no-unknown-property": 2,
    // Prevent usage of unknown DOM property
    "react/prefer-es6-class": 2,
    // Prefer es6 class instead of createClass for React Components
    "react/prop-types": 2,
    // Prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": 2,
    // Prevent missing React when using JSX
    "react/require-extension": 0,
    // Restrict file extensions that may be required
    "react/self-closing-comp": 2,
    // Prevent extra closing tags for components without children
    "react/sort-comp": 2,
    // Enforce component methods order
    "react/wrap-multilines": 0
    // Prevent missing parentheses around multilines JSX
  }
}
